// Alright, so. This module implements a so-called translation tool connector.
// It is responsible for hooking into the running game and sending lang labels
// which appear on the screen and in the dialogue, specifically their file and
// JSON paths (this is enough to look them up in the translations database
// unambiguously), to the translation tool running in a separate window.
//
// In practice we do so by taking advantage of internals of an obscure menu
// called `Language Edit` aka `ig.langEdit` aka "the typo editor". The menu is
// activated by pressing F7 and its purpose is for quickly editing a typo
// whenever you saw one during the early beta testing while reading a dialogue
// with some character for instance. It's not limited to just dialogue (e.g.
// item descriptions are also picked up), but the key is that it can show a
// list of strings "as they appear on the screen" so to speak. This is
// precisely what I need.
//
// See, this is a quite useful feature of the old translation tool, which I
// (obviously) needed to implement as well. Dimava's approach for obtaining the
// strings from the game by effectively monitoring `ig.langEdit.recentEntries`
// every ~100ms and checking if new lang labels were added. I, instead, inject
// into the functions that append to `recentEntries` and intercept the new lang
// labels directly. We've both hit the problem of determining "where the lang
// label comes from" so to speak. Basically, the `ig.LangLabel` objects don't
// contain enough information to determine their file and JSON paths:
// `ig.LangLabel#originFile` is set literally only for `commonEvents` in
// `database.json` (as of 1.3.0-4) and `langUid`s to my knowledge aren't unique
// even within a single file. Dimava's tool works around this by adding a
// property called `__path` to every lang label in every game file and writing
// the modified files to the disk (along with the injected Russian
// translations), I instead inject JSON and file paths at runtime using
// autopatchers (see `preload.js` for that).

import * as utils from './utils.js';

ig.module('translateinator.connector')
  .requires('impact.feature.lang-edit.lang-edit', 'impact.base.lang')
  .defines(() => {
    if (sc.tr2 == null) sc.tr2 = {};
    sc.tr2.symbols = {
      LangLabel_filePath: utils.LANG_LABEL_FILE_PATH_SYM,
      LangLabel_jsonPath: utils.LANG_LABEL_JSON_PATH_SYM,
    };

    ig.LangEdit.inject({
      // The hero of the day. Internally pushes strings to
      // `this.recentEntries`. `shortDesc` is a short description of the lang
      // label generated by the game and shown in the UI. We are not interested
      // in it, however.
      submitRecent(shortDesc, langLabel) {
        this.sendLangLabelToTrTool(langLabel);
        return this.parent(shortDesc, langLabel);
      },

      // `submitRecent`, but with a parameter for overriding the displayed file
      // path. We are interested only in the lang label though. When
      // `checkIfAlreadyAdded` is enabled, the lang label will not be pushed to
      // `this.recentEntries` if it is already present there (this option is
      // only enabled for items and enemies).
      submitCustomFile(shortDesc, langLabel, filePath, checkIfAlreadyAdded) {
        this.sendLangLabelToTrTool(langLabel);
        return this.parent(shortDesc, langLabel, filePath, checkIfAlreadyAdded);
      },

      sendLangLabelToTrTool(langLabel) {
        if (!(langLabel instanceof ig.LangLabel))
          throw Error('Assertion failed: langLabel instanceof ig.LangLabel');
        // Extract our secretly injected stuff.
        let filePath = langLabel.data[utils.LANG_LABEL_FILE_PATH_SYM];
        let jsonPath = langLabel.data[utils.LANG_LABEL_JSON_PATH_SYM];
        if (filePath != null && jsonPath != null) {
          sc.tr2.sendLangLabelToTrTool(filePath, jsonPath);
        }
      },
    });

    Object.assign(sc.tr2, {
      findTrTool() {
        let instances = [];
        for (let [otherNwWindow] of Object.values(global.__nw_windows)) {
          let otherWindow = otherNwWindow.window;
          if (utils.hasKey(otherWindow, '__crosscode_translation_tool__')) {
            instances.push(otherWindow.__app__);
          }
        }
        return instances;
      },

      sendLangLabelToTrTool(filePath, jsonPath) {
        for (let tool of sc.tr2.findTrTool()) {
          tool.receive_fragments_from_game([{ file_path: filePath, json_path: jsonPath }]);
        }
      },
    });
  });
